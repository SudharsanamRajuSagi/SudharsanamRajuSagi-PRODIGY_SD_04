def is_valid(board, row, col, num):
  """Checks if a number is valid in a given row, column, and box."""
  for i in range(9):
    if board[row][i] == num or board[i][col] == num:
      return False
  
  # Check 3x3 box
  start_row = (row // 3) * 3
  start_col = (col // 3) * 3
  for i in range(3):
    for j in range(3):
      if board[start_row + i][start_col + j] == num:
        return False
  return True

def solve_sudoku(board):
  """Solves a Sudoku puzzle using backtracking."""
  for row in range(9):
    for col in range(9):
      if board[row][col] == 0:
        for num in range(1, 10):
          if is_valid(board, row, col, num):
            board[row][col] = num
            if solve_sudoku(board):
              return True
            board[row][col] = 0  # Backtrack
        return False
  return True

def print_sudoku(board):
  """Prints the solved Sudoku puzzle."""
  for row in board:
    print(row)

# Example usage
board = [
  [3, 0, 6, 5, 0, 8, 4, 0, 0],
  [5, 2, 0, 0, 0, 0, 0, 0, 0],
  [0, 8, 7, 0, 0, 0, 0, 3, 1],
  [0, 0, 3, 0, 1, 0, 0, 8, 0],
  [9, 0, 0, 8, 6, 3, 0, 0, 5],
  [0, 5, 0, 0, 9, 0, 6, 0, 0],
  [1, 3, 0, 0, 0, 0, 2, 5, 0],
  [0, 0, 0, 0, 0, 0, 0, 7, 4],
  [0, 0, 5, 2, 0, 6, 3, 0, 0]
]

if solve_sudoku(board):
  print_sudoku(board)
else:
  print("No solution")

Output:
[[3, 1, 6, 5, 7, 8, 4, 9, 2],
 [5, 2, 9, 1, 3, 4, 7, 6, 8],
 [4, 8, 7, 9, 2, 6, 5, 3, 1],
 [2, 6, 3, 4, 1, 7, 9, 8, 5],
 [9, 7, 4, 8, 6, 3, 1, 2, 5],
 [8, 5, 1, 7, 9, 2, 6, 4, 3],
 [1, 3, 8, 6, 4, 5, 2, 7, 9],
 [6, 9, 2, 3, 8, 1, 8, 5, 4],
 [7, 4, 5, 2, 5, 9, 3, 1, 6]]
